// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4Mvc;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class Consts {
public static class Areas {
    static readonly ManagementClass s_Management = new ManagementClass();
    public static ManagementClass Management { get { return s_Management; } }
}
    public static CodeBase.Off.Website.Controllers.AboutController About = new CodeBase.Off.Website.Controllers.T4MVC_AboutController();
    public static CodeBase.Off.Website.Controllers.AdminController Admin = new CodeBase.Off.Website.Controllers.T4MVC_AdminController();
    public static CodeBase.Off.Website.Controllers.AuthenticationController Authentication = new CodeBase.Off.Website.Controllers.T4MVC_AuthenticationController();
    public static CodeBase.Off.Website.Controllers.BlogController Blog = new CodeBase.Off.Website.Controllers.T4MVC_BlogController();
    public static CodeBase.Off.Website.Controllers.CarouselsController Carousels = new CodeBase.Off.Website.Controllers.T4MVC_CarouselsController();
    public static CodeBase.Off.Website.Controllers.ContactController Contact = new CodeBase.Off.Website.Controllers.T4MVC_ContactController();
    public static CodeBase.Off.Website.Controllers.EntryController Entry = new CodeBase.Off.Website.Controllers.T4MVC_EntryController();
    public static CodeBase.Off.Website.Controllers.ErrorController Error = new CodeBase.Off.Website.Controllers.T4MVC_ErrorController();
    public static CodeBase.Off.Website.Controllers.FeedController Feed = new CodeBase.Off.Website.Controllers.T4MVC_FeedController();
    public static CodeBase.Off.Website.Controllers.FriendLinksController FriendLinks = new CodeBase.Off.Website.Controllers.T4MVC_FriendLinksController();
    public static CodeBase.Off.Website.Controllers.HomeController Home = new CodeBase.Off.Website.Controllers.T4MVC_HomeController();
    public static CodeBase.Off.Website.Controllers.NewslettersController Newsletters = new CodeBase.Off.Website.Controllers.T4MVC_NewslettersController();
    public static CodeBase.Off.Website.Controllers.PortfolioController Portfolio = new CodeBase.Off.Website.Controllers.T4MVC_PortfolioController();
    public static CodeBase.Off.Website.Controllers.SearchController Search = new CodeBase.Off.Website.Controllers.T4MVC_SearchController();
    public static CodeBase.Off.Website.Controllers.ServicesController Services = new CodeBase.Off.Website.Controllers.T4MVC_ServicesController();
    public static CodeBase.Off.Website.Controllers.SocialNetworksController SocialNetworks = new CodeBase.Off.Website.Controllers.T4MVC_SocialNetworksController();
    public static CodeBase.Off.Website.Controllers.StatisticsController Statistics = new CodeBase.Off.Website.Controllers.T4MVC_StatisticsController();
    public static CodeBase.Off.Website.Controllers.TagsController Tags = new CodeBase.Off.Website.Controllers.T4MVC_TagsController();
    public static CodeBase.Off.Website.Controllers.TestimonialsController Testimonials = new CodeBase.Off.Website.Controllers.T4MVC_TestimonialsController();
    public static CodeBase.Off.Website.Controllers.UsersController Users = new CodeBase.Off.Website.Controllers.T4MVC_UsersController();
    public static CodeBase.Off.Website.Controllers.WidgetsController Widgets = new CodeBase.Off.Website.Controllers.T4MVC_WidgetsController();
    public static T4Mvc.ContactMailerController ContactMailer = new T4Mvc.ContactMailerController();
    public static T4Mvc.EntriesMailerController EntriesMailer = new T4Mvc.EntriesMailerController();
    public static T4Mvc.NewslettersMailerController NewslettersMailer = new T4Mvc.NewslettersMailerController();
    public static T4Mvc.SharedController Shared = new T4Mvc.SharedController();
}

namespace T4Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class ManagementClass {
        public readonly string Name = "management";
        public T4Mvc.Management.SharedController Shared = new T4Mvc.Management.SharedController();
    }
}

   
namespace System.Web.Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.ActionLink(linkText, result, null, null, null, null);
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return htmlHelper.RouteLink(linkText, null, protocol ?? result.GetT4MVCResult().Protocol, hostName, fragment, result.GetRouteValueDictionary(), HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return htmlHelper.RouteLink(linkText, null, protocol ?? result.GetT4MVCResult().Protocol, hostName, fragment, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result) {
            return htmlHelper.BeginForm(result, FormMethod.Post);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.Action(result, null, null);
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result, string protocol = null, string hostName = null) {
            return urlHelper.RouteUrl(null, result.GetRouteValueDictionary(), protocol ?? result.GetT4MVCResult().Protocol, hostName);
        }

        public static string ActionAbsolute(this UrlHelper urlHelper, ActionResult result) {
            return string.Format("{0}{1}",urlHelper.RequestContext.HttpContext.Request.Url.GetLeftPart(UriPartial.Authority),
                urlHelper.RouteUrl(result.GetRouteValueDictionary()));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.BeginForm(result, ajaxOptions, null);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return BeginForm(ajaxHelper, result, ajaxOptions, HtmlHelper.AnonymousObjectToHtmlAttributes(htmlAttributes));
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return ajaxHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return MapRoute(routes, name, url, result, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, string[] namespaces) {
            return MapRoute(routes, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRoute(routes, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            routes.Add(name, route);
            return route;
        }

        // Note: can't name the AreaRegistrationContext methods 'MapRoute', as that conflicts with the existing methods
        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result) {
            return MapRouteArea(context, name, url, result, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, string[] namespaces) {
            return MapRouteArea(context, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRouteArea(context, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            if ((namespaces == null) && (context.Namespaces != null)) {
                 namespaces = context.Namespaces.ToArray();
            }
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            context.Routes.Add(name, route);
            route.DataTokens["area"] = context.AreaName;
            bool useNamespaceFallback = (namespaces == null) || (namespaces.Length == 0);
            route.DataTokens["UseNamespaceFallback"] = useNamespaceFallback;
            return route;
        }

        private static Route CreateRoute(string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            var routeConstraints = new RouteValueDictionary(constraints);

            // Create and add the route
            var route = new Route(url, routeValues, routeConstraints, new MvcRouteHandler());

            route.DataTokens = new RouteValueDictionary();

            if (namespaces != null && namespaces.Length > 0) {
                route.DataTokens["Namespaces"] = namespaces;
            }

            return route;
        }

        public static IT4MVCActionResult GetT4MVCResult(this ActionResult result) {
            var t4MVCResult = result as IT4MVCActionResult;
            if (t4MVCResult == null) {
                throw new InvalidOperationException("T4MVC was called incorrectly. You may need to force it to regenerate by right clicking on T4MVC.tt and choosing Run Custom Tool");
            }
            return t4MVCResult;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return result.GetT4MVCResult().RouteValueDictionary;
        }

        public static ActionResult AddRouteValues(this ActionResult result, object routeValues) {
            return result.AddRouteValues(new RouteValueDictionary(routeValues));
        }

        public static ActionResult AddRouteValues(this ActionResult result, RouteValueDictionary routeValues) {
            RouteValueDictionary currentRouteValues = result.GetRouteValueDictionary();

            // Add all the extra values
            foreach (var pair in routeValues) {
                ModelUnbinderHelpers.AddRouteValues(currentRouteValues, pair.Key, pair.Value);
            }

            return result;
        }

        public static ActionResult AddRouteValues(this ActionResult result, System.Collections.Specialized.NameValueCollection nameValueCollection)
        {
            // Copy all the values from the NameValueCollection into the route dictionary
            if (nameValueCollection.AllKeys.Any(m => m == null))  //if it has a null, the CopyTo extension will crash!
            {
                var filtered = new System.Collections.Specialized.NameValueCollection(nameValueCollection);
                filtered.Remove(null);
                filtered.CopyTo(result.GetRouteValueDictionary());
            }
            else
                nameValueCollection.CopyTo(result.GetRouteValueDictionary());
            return result;
        }

        public static ActionResult AddRouteValue(this ActionResult result, string name, object value) {
            RouteValueDictionary routeValues = result.GetRouteValueDictionary();
            ModelUnbinderHelpers.AddRouteValues(routeValues, name, value);
            return result;
        }
        
        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action, string protocol = null) {
            result.Controller = controller;
            result.Action = action;
            result.Protocol = protocol;
            result.RouteValueDictionary = new RouteValueDictionary();
            result.RouteValueDictionary.Add("Area", area ?? "");
            result.RouteValueDictionary.Add("Controller", controller);
            result.RouteValueDictionary.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }

        static DateTime CenturyBegin=new DateTime(2001,1,1);
        public static string TimestampString(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return string.Empty;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return Convert.ToString((System.IO.File.GetLastWriteTimeUtc(filePath).Ticks-CenturyBegin.Ticks)/1000000000,16);            
        }
    }
}



namespace T4Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}


  

   
[GeneratedCode("T4MVC", "2.0")]   
public interface IT4MVCActionResult {   
    string Action { get; set; }   
    string Controller { get; set; }   
    RouteValueDictionary RouteValueDictionary { get; set; } 
    string Protocol {get; set; }  
}   
  

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ViewResult : System.Web.Mvc.ViewResult, IT4MVCActionResult {
    public T4MVC_ViewResult(string area, string controller, string action, string protocol = null): base()  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_PartialViewResult : System.Web.Mvc.PartialViewResult, IT4MVCActionResult {
    public T4MVC_PartialViewResult(string area, string controller, string action, string protocol = null): base()  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_FileStreamResult : System.Web.Mvc.FileStreamResult, IT4MVCActionResult {
    public T4MVC_FileStreamResult(string area, string controller, string action, string protocol = null): base(default(System.IO.Stream), " ")  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action, string protocol = null): base()  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_RssResult : CodeBase.Common.Web.Mvc.RssResult, IT4MVCActionResult {
    public T4MVC_RssResult(string area, string controller, string action, string protocol = null): base(" ", " ", default(System.Uri), default(System.Collections.Generic.IList<System.ServiceModel.Syndication.SyndicationItem>), " ")  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ViewResultBase : System.Web.Mvc.ViewResultBase, IT4MVCActionResult {
    public T4MVC_ViewResultBase(string area, string controller, string action, string protocol = null): base()  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    protected override void FindView(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_RedirectResult : System.Web.Mvc.RedirectResult, IT4MVCActionResult {
    public T4MVC_RedirectResult(string area, string controller, string action, string protocol = null): base(" ", default(bool))  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_JsonResult : System.Web.Mvc.JsonResult, IT4MVCActionResult {
    public T4MVC_JsonResult(string area, string controller, string action, string protocol = null): base()  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_EmptyResult : System.Web.Mvc.EmptyResult, IT4MVCActionResult {
    public T4MVC_EmptyResult(string area, string controller, string action, string protocol = null): base()  {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Cdn {
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}


namespace CodeBase.Off.Website.Controllers {
    public partial class AboutController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AboutController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.PartialViewResult Members() {
            return new T4MVC_PartialViewResult(Area, Name, ActionNames.Members);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult Show() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.Show);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.FileStreamResult ShowPost() {
            return new T4MVC_FileStreamResult(Area, Name, ActionNames.ShowPost);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AboutController Actions { get { return Consts.About; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "about";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "about";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = ("Index").ToLowerInvariant();
            public readonly string Members = ("Members").ToLowerInvariant();
            public readonly string Show = ("Show").ToLowerInvariant();
            public readonly string ShowPost = ("Show").ToLowerInvariant();
        }


        static readonly ActionParamsClass_Members s_params_Members = new ActionParamsClass_Members();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Members MembersParams { get { return s_params_Members; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Members {
            public readonly string userName = ("userName").ToLowerInvariant();
            public readonly string emptyTemplate = ("emptyTemplate").ToLowerInvariant();
        }
        static readonly ActionParamsClass_Show s_params_Show = new ActionParamsClass_Show();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Show ShowParams { get { return s_params_Show; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Show {
            public readonly string userName = ("userName").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ShowPost s_params_ShowPost = new ActionParamsClass_ShowPost();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ShowPost ShowPostParams { get { return s_params_ShowPost; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ShowPost {
            public readonly string userName = ("userName").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _AboutLayout = "~/Views/About/_AboutLayout.cshtml";
            public readonly string _InDepth = "~/Views/About/_InDepth.cshtml";
            public readonly string _MemberDetailsBox = "~/Views/About/_MemberDetailsBox.cshtml";
            public readonly string _MemberMetas = "~/Views/About/_MemberMetas.cshtml";
            public readonly string _MemberResume = "~/Views/About/_MemberResume.cshtml";
            public readonly string _Members = "~/Views/About/_Members.cshtml";
            public readonly string Index = "~/Views/About/Index.cshtml";
            public readonly string Show = "~/Views/About/Show.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_AboutController: CodeBase.Off.Website.Controllers.AboutController {
        public T4MVC_AboutController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.PartialViewResult Members(string userName, string emptyTemplate) {
            var callInfo = new T4MVC_PartialViewResult(Area, Name, ActionNames.Members);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userName", userName);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "emptyTemplate", emptyTemplate);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Show(string userName) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Show);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userName", userName);
            return callInfo;
        }

        public override System.Web.Mvc.FileStreamResult ShowPost(string userName) {
            var callInfo = new T4MVC_FileStreamResult(Area, Name, ActionNames.ShowPost);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userName", userName);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class AdminController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AdminController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AdminController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AdminController Actions { get { return Consts.Admin; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "admin";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "admin";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = ("Index").ToLowerInvariant();
            public readonly string Backup = ("Backup").ToLowerInvariant();
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_AdminController: CodeBase.Off.Website.Controllers.AdminController {
        public T4MVC_AdminController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Backup() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Backup);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class AuthenticationController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AuthenticationController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected AuthenticationController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult OpenId() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.OpenId);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public AuthenticationController Actions { get { return Consts.Authentication; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "authentication";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "authentication";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Login = ("Login").ToLowerInvariant();
            public readonly string OpenId = ("OpenId").ToLowerInvariant();
            public readonly string OpenIdCallback = ("OpenIdCallback").ToLowerInvariant();
            public readonly string Logout = ("Logout").ToLowerInvariant();
        }


        static readonly ActionParamsClass_OpenId s_params_OpenId = new ActionParamsClass_OpenId();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OpenId OpenIdParams { get { return s_params_OpenId; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OpenId {
            public readonly string model = ("model").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_AuthenticationController: CodeBase.Off.Website.Controllers.AuthenticationController {
        public T4MVC_AuthenticationController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Login() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Login);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult OpenId(CodeBase.Off.Website.Models.OpenIdLoginModel model) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.OpenId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult OpenIdCallback() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.OpenIdCallback);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Logout() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Logout);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class BlogController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected BlogController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult ByTag() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.ByTag);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult ByAuthor() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.ByAuthor);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult ByDate() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.ByDate);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public BlogController Actions { get { return Consts.Blog; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "blog";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "blog";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = ("Index").ToLowerInvariant();
            public readonly string Archive = ("Archive").ToLowerInvariant();
            public readonly string RecentEntries = ("RecentEntries").ToLowerInvariant();
            public readonly string ByTag = ("ByTag").ToLowerInvariant();
            public readonly string ByAuthor = ("ByAuthor").ToLowerInvariant();
            public readonly string ByDate = ("ByDate").ToLowerInvariant();
        }


        static readonly ActionParamsClass_Archive s_params_Archive = new ActionParamsClass_Archive();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Archive ArchiveParams { get { return s_params_Archive; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Archive {
            public readonly string isLight = ("isLight").ToLowerInvariant();
        }
        static readonly ActionParamsClass_RecentEntries s_params_RecentEntries = new ActionParamsClass_RecentEntries();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RecentEntries RecentEntriesParams { get { return s_params_RecentEntries; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RecentEntries {
            public readonly string isLight = ("isLight").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ByTag s_params_ByTag = new ActionParamsClass_ByTag();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ByTag ByTagParams { get { return s_params_ByTag; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ByTag {
            public readonly string slug = ("slug").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ByAuthor s_params_ByAuthor = new ActionParamsClass_ByAuthor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ByAuthor ByAuthorParams { get { return s_params_ByAuthor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ByAuthor {
            public readonly string userName = ("userName").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ByDate s_params_ByDate = new ActionParamsClass_ByDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ByDate ByDateParams { get { return s_params_ByDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ByDate {
            public readonly string year = ("year").ToLowerInvariant();
            public readonly string month = ("month").ToLowerInvariant();
            public readonly string day = ("day").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _Archive_Light = "~/Views/Blog/_Archive.Light.cshtml";
            public readonly string _BlogLayout = "~/Views/Blog/_BlogLayout.cshtml";
            public readonly string _Entries_List = "~/Views/Blog/_Entries.List.cshtml";
            public readonly string _Entries_List_Light = "~/Views/Blog/_Entries.List.Light.cshtml";
            public readonly string ByAuthor = "~/Views/Blog/ByAuthor.cshtml";
            public readonly string ByDate = "~/Views/Blog/ByDate.cshtml";
            public readonly string ByTag = "~/Views/Blog/ByTag.cshtml";
            public readonly string Index = "~/Views/Blog/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_BlogController: CodeBase.Off.Website.Controllers.BlogController {
        public T4MVC_BlogController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Archive(bool isLight) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Archive);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isLight", isLight);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult RecentEntries(bool isLight) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.RecentEntries);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isLight", isLight);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ByTag(string slug) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ByTag);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slug", slug);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ByAuthor(string userName) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ByAuthor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userName", userName);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult ByDate(int year, int? month, int? day) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.ByDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "year", year);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "month", month);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "day", day);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class CarouselsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected CarouselsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public CarouselsController Actions { get { return Consts.Carousels; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "carousels";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "carousels";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Carousels = ("Carousels").ToLowerInvariant();
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _Carousels = "~/Views/Carousels/_Carousels.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_CarouselsController: CodeBase.Off.Website.Controllers.CarouselsController {
        public T4MVC_CarouselsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.PartialViewResult Carousels() {
            var callInfo = new T4MVC_PartialViewResult(Area, Name, ActionNames.Carousels);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class ContactController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ContactController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ContactController Actions { get { return Consts.Contact; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "contact";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "contact";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = ("Index").ToLowerInvariant();
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index {
            public readonly string model = ("model").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _ContactForm = "~/Views/Contact/_ContactForm.cshtml";
            public readonly string Index = "~/Views/Contact/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_ContactController: CodeBase.Off.Website.Controllers.ContactController {
        public T4MVC_ContactController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Index(CodeBase.Off.Website.Models.ContactModel model) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class EntryController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected EntryController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Show() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Show);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Edit() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Edit);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public EntryController Actions { get { return Consts.Entry; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "entry";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "entry";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Show = ("Show").ToLowerInvariant();
            public readonly string Add = ("Add").ToLowerInvariant();
            public readonly string Edit = ("Edit").ToLowerInvariant();
        }


        static readonly ActionParamsClass_Show s_params_Show = new ActionParamsClass_Show();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Show ShowParams { get { return s_params_Show; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Show {
            public readonly string year = ("year").ToLowerInvariant();
            public readonly string month = ("month").ToLowerInvariant();
            public readonly string slug = ("slug").ToLowerInvariant();
        }
        static readonly ActionParamsClass_Add s_params_Add = new ActionParamsClass_Add();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Add AddParams { get { return s_params_Add; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Add {
            public readonly string model = ("model").ToLowerInvariant();
        }
        static readonly ActionParamsClass_Edit s_params_Edit = new ActionParamsClass_Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Edit EditParams { get { return s_params_Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Edit {
            public readonly string slug = ("slug").ToLowerInvariant();
            public readonly string model = ("model").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string Show = "~/Views/Entry/Show.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_EntryController: CodeBase.Off.Website.Controllers.EntryController {
        public T4MVC_EntryController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Show(int year, int month, string slug) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Show);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "year", year);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "month", month);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slug", slug);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Add() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Add);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Add(CodeBase.Off.Website.Models.EntryEditModel model) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Add);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit(string slug) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slug", slug);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Edit(CodeBase.Off.Website.Models.EntryEditModel model) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class ErrorController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ErrorController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ErrorController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Index() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Index);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ErrorController Actions { get { return Consts.Error; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "error";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "error";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = ("Index").ToLowerInvariant();
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index {
            public readonly string catchAll = ("catchAll").ToLowerInvariant();
            public readonly string httpException = ("httpException").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string Index = "~/Views/Error/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_ErrorController: CodeBase.Off.Website.Controllers.ErrorController {
        public T4MVC_ErrorController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index(string catchAll, System.Web.HttpException httpException) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "catchAll", catchAll);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "httpException", httpException);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class FeedController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FeedController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public CodeBase.Common.Web.Mvc.RssResult ByTag() {
            return new T4MVC_RssResult(Area, Name, ActionNames.ByTag);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public CodeBase.Common.Web.Mvc.RssResult ByAuthor() {
            return new T4MVC_RssResult(Area, Name, ActionNames.ByAuthor);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public CodeBase.Common.Web.Mvc.RssResult ByDate() {
            return new T4MVC_RssResult(Area, Name, ActionNames.ByDate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public CodeBase.Common.Web.Mvc.RssResult EntryComments() {
            return new T4MVC_RssResult(Area, Name, ActionNames.EntryComments);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FeedController Actions { get { return Consts.Feed; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "feed";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "feed";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = ("Index").ToLowerInvariant();
            public readonly string ByTag = ("ByTag").ToLowerInvariant();
            public readonly string ByAuthor = ("ByAuthor").ToLowerInvariant();
            public readonly string ByDate = ("ByDate").ToLowerInvariant();
            public readonly string EntryComments = ("EntryComments").ToLowerInvariant();
        }


        static readonly ActionParamsClass_ByTag s_params_ByTag = new ActionParamsClass_ByTag();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ByTag ByTagParams { get { return s_params_ByTag; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ByTag {
            public readonly string slug = ("slug").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ByAuthor s_params_ByAuthor = new ActionParamsClass_ByAuthor();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ByAuthor ByAuthorParams { get { return s_params_ByAuthor; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ByAuthor {
            public readonly string userName = ("userName").ToLowerInvariant();
        }
        static readonly ActionParamsClass_ByDate s_params_ByDate = new ActionParamsClass_ByDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ByDate ByDateParams { get { return s_params_ByDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ByDate {
            public readonly string year = ("year").ToLowerInvariant();
            public readonly string month = ("month").ToLowerInvariant();
            public readonly string day = ("day").ToLowerInvariant();
        }
        static readonly ActionParamsClass_EntryComments s_params_EntryComments = new ActionParamsClass_EntryComments();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EntryComments EntryCommentsParams { get { return s_params_EntryComments; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EntryComments {
            public readonly string year = ("year").ToLowerInvariant();
            public readonly string month = ("month").ToLowerInvariant();
            public readonly string day = ("day").ToLowerInvariant();
            public readonly string slug = ("slug").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_FeedController: CodeBase.Off.Website.Controllers.FeedController {
        public T4MVC_FeedController() : base(Dummy.Instance) { }

        public override CodeBase.Common.Web.Mvc.RssResult Index() {
            var callInfo = new T4MVC_RssResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override CodeBase.Common.Web.Mvc.RssResult ByTag(string slug) {
            var callInfo = new T4MVC_RssResult(Area, Name, ActionNames.ByTag);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slug", slug);
            return callInfo;
        }

        public override CodeBase.Common.Web.Mvc.RssResult ByAuthor(string userName) {
            var callInfo = new T4MVC_RssResult(Area, Name, ActionNames.ByAuthor);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "userName", userName);
            return callInfo;
        }

        public override CodeBase.Common.Web.Mvc.RssResult ByDate(int year, int? month, int? day) {
            var callInfo = new T4MVC_RssResult(Area, Name, ActionNames.ByDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "year", year);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "month", month);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "day", day);
            return callInfo;
        }

        public override CodeBase.Common.Web.Mvc.RssResult EntryComments(int year, int month, int day, string slug) {
            var callInfo = new T4MVC_RssResult(Area, Name, ActionNames.EntryComments);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "year", year);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "month", month);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "day", day);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slug", slug);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class FriendLinksController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FriendLinksController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.RedirectResult RedirectTo() {
            return new T4MVC_RedirectResult(Area, Name, ActionNames.RedirectTo);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FriendLinksController Actions { get { return Consts.FriendLinks; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "friendlinks";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "friendlinks";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string List = ("List").ToLowerInvariant();
            public readonly string RedirectTo = ("RedirectTo").ToLowerInvariant();
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List {
            public readonly string isLight = ("isLight").ToLowerInvariant();
        }
        static readonly ActionParamsClass_RedirectTo s_params_RedirectTo = new ActionParamsClass_RedirectTo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RedirectTo RedirectToParams { get { return s_params_RedirectTo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RedirectTo {
            public readonly string slug = ("slug").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _List_Light = "~/Views/FriendLinks/_List.Light.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_FriendLinksController: CodeBase.Off.Website.Controllers.FriendLinksController {
        public T4MVC_FriendLinksController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResultBase List(bool isLight) {
            var callInfo = new T4MVC_ViewResultBase(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isLight", isLight);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectResult RedirectTo(string slug) {
            var callInfo = new T4MVC_RedirectResult(Area, Name, ActionNames.RedirectTo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slug", slug);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class HomeController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public HomeController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected HomeController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public HomeController Actions { get { return Consts.Home; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "home";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "home";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = ("Index").ToLowerInvariant();
            public readonly string Closed = ("Closed").ToLowerInvariant();
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _Intro = "~/Views/Home/_Intro.cshtml";
            public readonly string Index = "~/Views/Home/Index.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_HomeController: CodeBase.Off.Website.Controllers.HomeController {
        public T4MVC_HomeController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Closed() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Closed);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class NewslettersController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected NewslettersController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.JsonResult SubscribValidateEmail() {
            return new T4MVC_JsonResult(Area, Name, ActionNames.SubscribValidateEmail);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult SubscribConfirmation() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.SubscribConfirmation);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult UnSubscrib() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.UnSubscrib);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public NewslettersController Actions { get { return Consts.Newsletters; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "newsletters";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "newsletters";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Subscrib = ("Subscrib").ToLowerInvariant();
            public readonly string SubscribValidateEmail = ("SubscribValidateEmail").ToLowerInvariant();
            public readonly string SubscribConfirmation = ("SubscribConfirmation").ToLowerInvariant();
            public readonly string UnSubscrib = ("UnSubscrib").ToLowerInvariant();
        }


        static readonly ActionParamsClass_Subscrib s_params_Subscrib = new ActionParamsClass_Subscrib();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Subscrib SubscribParams { get { return s_params_Subscrib; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Subscrib {
            public readonly string model = ("model").ToLowerInvariant();
        }
        static readonly ActionParamsClass_SubscribValidateEmail s_params_SubscribValidateEmail = new ActionParamsClass_SubscribValidateEmail();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SubscribValidateEmail SubscribValidateEmailParams { get { return s_params_SubscribValidateEmail; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SubscribValidateEmail {
            public readonly string email = ("email").ToLowerInvariant();
        }
        static readonly ActionParamsClass_SubscribConfirmation s_params_SubscribConfirmation = new ActionParamsClass_SubscribConfirmation();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SubscribConfirmation SubscribConfirmationParams { get { return s_params_SubscribConfirmation; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SubscribConfirmation {
            public readonly string guid = ("guid").ToLowerInvariant();
        }
        static readonly ActionParamsClass_UnSubscrib s_params_UnSubscrib = new ActionParamsClass_UnSubscrib();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UnSubscrib UnSubscribParams { get { return s_params_UnSubscrib; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UnSubscrib {
            public readonly string guid = ("guid").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _Subscrib = "~/Views/Newsletters/_Subscrib.cshtml";
            public readonly string Subscrib = "~/Views/Newsletters/Subscrib.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_NewslettersController: CodeBase.Off.Website.Controllers.NewslettersController {
        public T4MVC_NewslettersController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Subscrib() {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Subscrib);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Subscrib(CodeBase.Off.Website.Models.SubscriptionRequestModel model) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Subscrib);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "model", model);
            return callInfo;
        }

        public override System.Web.Mvc.JsonResult SubscribValidateEmail(string email) {
            var callInfo = new T4MVC_JsonResult(Area, Name, ActionNames.SubscribValidateEmail);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "email", email);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult SubscribConfirmation(System.Guid guid) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.SubscribConfirmation);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "guid", guid);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult UnSubscrib(System.Guid guid) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.UnSubscrib);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "guid", guid);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class PortfolioController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PortfolioController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.PartialViewResult Folios() {
            return new T4MVC_PartialViewResult(Area, Name, ActionNames.Folios);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Show() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Show);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PortfolioController Actions { get { return Consts.Portfolio; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "portfolio";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "portfolio";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = ("Index").ToLowerInvariant();
            public readonly string Folios = ("Folios").ToLowerInvariant();
            public readonly string Show = ("Show").ToLowerInvariant();
        }


        static readonly ActionParamsClass_Folios s_params_Folios = new ActionParamsClass_Folios();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Folios FoliosParams { get { return s_params_Folios; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Folios {
            public readonly string emptyTemplate = ("emptyTemplate").ToLowerInvariant();
        }
        static readonly ActionParamsClass_Show s_params_Show = new ActionParamsClass_Show();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Show ShowParams { get { return s_params_Show; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Show {
            public readonly string slug = ("slug").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _Folios = "~/Views/Portfolio/_Folios.cshtml";
            public readonly string Index = "~/Views/Portfolio/Index.cshtml";
            public readonly string Show = "~/Views/Portfolio/Show.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_PortfolioController: CodeBase.Off.Website.Controllers.PortfolioController {
        public T4MVC_PortfolioController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.PartialViewResult Folios(string emptyTemplate) {
            var callInfo = new T4MVC_PartialViewResult(Area, Name, ActionNames.Folios);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "emptyTemplate", emptyTemplate);
            return callInfo;
        }

        public override System.Web.Mvc.ActionResult Show(string slug) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Show);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slug", slug);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class SearchController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SearchController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ActionResult Index() {
            return new T4MVC_ActionResult(Area, Name, ActionNames.Index);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SearchController Actions { get { return Consts.Search; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "search";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "search";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = ("Index").ToLowerInvariant();
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index {
            public readonly string q = ("q").ToLowerInvariant();
            public readonly string page = ("page").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_SearchController: CodeBase.Off.Website.Controllers.SearchController {
        public T4MVC_SearchController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult Index(string q, int page) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "q", q);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "page", page);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class ServicesController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected ServicesController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.PartialViewResult Services() {
            return new T4MVC_PartialViewResult(Area, Name, ActionNames.Services);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.ViewResult Show() {
            return new T4MVC_ViewResult(Area, Name, ActionNames.Show);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ServicesController Actions { get { return Consts.Services; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "services";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "services";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Index = ("Index").ToLowerInvariant();
            public readonly string Services = ("Services").ToLowerInvariant();
            public readonly string Show = ("Show").ToLowerInvariant();
        }


        static readonly ActionParamsClass_Services s_params_Services = new ActionParamsClass_Services();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Services ServicesParams { get { return s_params_Services; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Services {
            public readonly string emptyTemplate = ("emptyTemplate").ToLowerInvariant();
        }
        static readonly ActionParamsClass_Show s_params_Show = new ActionParamsClass_Show();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Show ShowParams { get { return s_params_Show; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Show {
            public readonly string slug = ("slug").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _Services = "~/Views/Services/_Services.cshtml";
            public readonly string Index = "~/Views/Services/Index.cshtml";
            public readonly string Show = "~/Views/Services/Show.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_ServicesController: CodeBase.Off.Website.Controllers.ServicesController {
        public T4MVC_ServicesController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResult Index() {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Index);
            return callInfo;
        }

        public override System.Web.Mvc.PartialViewResult Services(string emptyTemplate) {
            var callInfo = new T4MVC_PartialViewResult(Area, Name, ActionNames.Services);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "emptyTemplate", emptyTemplate);
            return callInfo;
        }

        public override System.Web.Mvc.ViewResult Show(string slug) {
            var callInfo = new T4MVC_ViewResult(Area, Name, ActionNames.Show);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slug", slug);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class SocialNetworksController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SocialNetworksController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.RedirectResult RedirectTo() {
            return new T4MVC_RedirectResult(Area, Name, ActionNames.RedirectTo);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SocialNetworksController Actions { get { return Consts.SocialNetworks; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "socialnetworks";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "socialnetworks";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string List = ("List").ToLowerInvariant();
            public readonly string RedirectTo = ("RedirectTo").ToLowerInvariant();
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List {
            public readonly string isLight = ("isLight").ToLowerInvariant();
        }
        static readonly ActionParamsClass_RedirectTo s_params_RedirectTo = new ActionParamsClass_RedirectTo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RedirectTo RedirectToParams { get { return s_params_RedirectTo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RedirectTo {
            public readonly string slug = ("slug").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _List_Light = "~/Views/SocialNetworks/_List.Light.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_SocialNetworksController: CodeBase.Off.Website.Controllers.SocialNetworksController {
        public T4MVC_SocialNetworksController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResultBase List(bool isLight) {
            var callInfo = new T4MVC_ViewResultBase(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isLight", isLight);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectResult RedirectTo(string slug) {
            var callInfo = new T4MVC_RedirectResult(Area, Name, ActionNames.RedirectTo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slug", slug);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class StatisticsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected StatisticsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.EmptyResult Apply() {
            return new T4MVC_EmptyResult(Area, Name, ActionNames.Apply);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public StatisticsController Actions { get { return Consts.Statistics; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "statistics";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "statistics";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string Apply = ("Apply").ToLowerInvariant();
        }


        static readonly ActionParamsClass_Apply s_params_Apply = new ActionParamsClass_Apply();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Apply ApplyParams { get { return s_params_Apply; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Apply {
            public readonly string sessionId = ("sessionId").ToLowerInvariant();
            public readonly string url = ("url").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_StatisticsController: CodeBase.Off.Website.Controllers.StatisticsController {
        public T4MVC_StatisticsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.EmptyResult Apply(System.Guid sessionId, string url) {
            var callInfo = new T4MVC_EmptyResult(Area, Name, ActionNames.Apply);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sessionId", sessionId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "url", url);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class TagsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected TagsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public TagsController Actions { get { return Consts.Tags; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "tags";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "tags";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string List = ("List").ToLowerInvariant();
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List {
            public readonly string isLight = ("isLight").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _List_Light = "~/Views/Tags/_List.Light.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_TagsController: CodeBase.Off.Website.Controllers.TagsController {
        public T4MVC_TagsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ActionResult List(bool isLight) {
            var callInfo = new T4MVC_ActionResult(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isLight", isLight);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class TestimonialsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected TestimonialsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public System.Web.Mvc.RedirectResult RedirectTo() {
            return new T4MVC_RedirectResult(Area, Name, ActionNames.RedirectTo);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public TestimonialsController Actions { get { return Consts.Testimonials; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "testimonials";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "testimonials";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string List = ("List").ToLowerInvariant();
            public readonly string RedirectTo = ("RedirectTo").ToLowerInvariant();
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List {
            public readonly string isLight = ("isLight").ToLowerInvariant();
        }
        static readonly ActionParamsClass_RedirectTo s_params_RedirectTo = new ActionParamsClass_RedirectTo();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RedirectTo RedirectToParams { get { return s_params_RedirectTo; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RedirectTo {
            public readonly string slug = ("slug").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _List_Light = "~/Views/Testimonials/_List.Light.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_TestimonialsController: CodeBase.Off.Website.Controllers.TestimonialsController {
        public T4MVC_TestimonialsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResultBase List(bool isLight) {
            var callInfo = new T4MVC_ViewResultBase(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isLight", isLight);
            return callInfo;
        }

        public override System.Web.Mvc.RedirectResult RedirectTo(string slug) {
            var callInfo = new T4MVC_RedirectResult(Area, Name, ActionNames.RedirectTo);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slug", slug);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class UsersController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UsersController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UsersController Actions { get { return Consts.Users; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "users";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "users";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string List = ("List").ToLowerInvariant();
        }


        static readonly ActionParamsClass_List s_params_List = new ActionParamsClass_List();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_List ListParams { get { return s_params_List; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_List {
            public readonly string isLight = ("isLight").ToLowerInvariant();
        }
        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _List_Light = "~/Views/Users/_List.Light.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_UsersController: CodeBase.Off.Website.Controllers.UsersController {
        public T4MVC_UsersController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.ViewResultBase List(bool isLight) {
            var callInfo = new T4MVC_ViewResultBase(Area, Name, ActionNames.List);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "isLight", isLight);
            return callInfo;
        }

    }
}

namespace CodeBase.Off.Website.Controllers {
    public partial class WidgetsController {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public WidgetsController() { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected WidgetsController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }


        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public WidgetsController Actions { get { return Consts.Widgets; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "widgets";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "widgets";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass {
            public readonly string GoogleAnalytics = ("GoogleAnalytics").ToLowerInvariant();
        }


        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string _GoogleAnalytics = "~/Views/Widgets/_GoogleAnalytics.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class T4MVC_WidgetsController: CodeBase.Off.Website.Controllers.WidgetsController {
        public T4MVC_WidgetsController() : base(Dummy.Instance) { }

        public override System.Web.Mvc.PartialViewResult GoogleAnalytics() {
            var callInfo = new T4MVC_PartialViewResult(Area, Name, ActionNames.GoogleAnalytics);
            return callInfo;
        }

    }
}

namespace T4Mvc {
    public class ContactMailerController {

        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string PrepareUserMessage = "~/Views/ContactMailer/PrepareUserMessage.cshtml";
        }
    }

}

namespace T4Mvc {
    public class EntriesMailerController {

        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string PrepareEntry = "~/Views/EntriesMailer/PrepareEntry.cshtml";
        }
    }

}

namespace T4Mvc {
    public class NewslettersMailerController {

        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            public readonly string PrepareSubscribConfirmation = "~/Views/NewslettersMailer/PrepareSubscribConfirmation.cshtml";
        }
    }

}

namespace T4Mvc {
    public class SharedController {

        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
            static readonly _DisplayTemplates s_DisplayTemplates = new _DisplayTemplates();
            public _DisplayTemplates DisplayTemplates { get { return s_DisplayTemplates; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _DisplayTemplates{
                public readonly string PersianDate = "PersianDate";
            }
            static readonly _EditorTemplates s_EditorTemplates = new _EditorTemplates();
            public _EditorTemplates EditorTemplates { get { return s_EditorTemplates; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _EditorTemplates{
                public readonly string Color = "Color";
                public readonly string Date = "Date";
                public readonly string DateTime_Local = "DateTime-Local";
                public readonly string DateTime = "DateTime";
                public readonly string EmailAddress = "EmailAddress";
                public readonly string Month = "Month";
                public readonly string Number = "Number";
                public readonly string PhoneNumber = "PhoneNumber";
                public readonly string Search = "Search";
                public readonly string Time = "Time";
                public readonly string _Url = "Url";
                public readonly string Week = "Week";
            }
            static readonly _Layouts s_Layouts = new _Layouts();
            public _Layouts Layouts { get { return s_Layouts; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _Layouts{
                public readonly string _LayoutBase = "~/Views/Shared/Layouts/_LayoutBase.cshtml";
                public readonly string _MailLayoutBase = "~/Views/Shared/Layouts/_MailLayoutBase.cshtml";
                public readonly string _NullLayout = "~/Views/Shared/Layouts/_NullLayout.cshtml";
                public readonly string TextFile1 = "~/Views/Shared/Layouts/TextFile1.txt";
            }
            static readonly _Partials s_Partials = new _Partials();
            public _Partials Partials { get { return s_Partials; } }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public partial class _Partials{
                public readonly string _BackTo = "~/Views/Shared/Partials/_BackTo.cshtml";
                public readonly string _Breadcrumbs = "~/Views/Shared/Partials/_Breadcrumbs.cshtml";
                public readonly string _ContactDetails = "~/Views/Shared/Partials/_ContactDetails.cshtml";
                public readonly string _EntryMetadata = "~/Views/Shared/Partials/_EntryMetadata.cshtml";
                public readonly string _Footer = "~/Views/Shared/Partials/_Footer.cshtml";
                public readonly string _Header = "~/Views/Shared/Partials/_Header.cshtml";
                public readonly string _Metas = "~/Views/Shared/Partials/_Metas.cshtml";
                public readonly string _Nav = "~/Views/Shared/Partials/_Nav.cshtml";
                public readonly string _Notifications = "~/Views/Shared/Partials/_Notifications.cshtml";
                public readonly string _TagsListLink = "~/Views/Shared/Partials/_TagsListLink.cshtml";
                public readonly string NoMatch = "~/Views/Shared/Partials/NoMatch.cshtml";
                public readonly string NoMore = "~/Views/Shared/Partials/NoMore.cshtml";
                public readonly string NoRecord = "~/Views/Shared/Partials/NoRecord.cshtml";
            }
        }
    }

}

namespace T4Mvc.Management {
    public class SharedController {

        static readonly ViewNames s_views = new ViewNames();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewNames Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewNames {
        }
    }

}





namespace System.Web.Mvc {
    #region ModelUnbinders
    [GeneratedCode("T4MVC", "2.0")]
    public interface IModelUnbinder {
        void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue);
    }
    [GeneratedCode("T4MVC", "2.0")]
    public interface IModelUnbinder<in T> where T : class {
        void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, T routeValue);
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class ModelUnbinders {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        private class GenericModelUnbinderWrapper<T> : IModelUnbinder where T : class {
            private readonly IModelUnbinder<T> _unbinder;

            public GenericModelUnbinderWrapper(IModelUnbinder<T> unbinder) {
                _unbinder = unbinder;
            }

            public void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue) {
                var typedObject = routeValue as T;
                _unbinder.UnbindModel(routeValueDictionary, routeName, typedObject);
            }
        }
        
        private readonly Dictionary<Type, IModelUnbinder> _unbinders = new Dictionary<Type, IModelUnbinder>();
        public virtual void Add(Type type, IModelUnbinder unbinder) {
            _unbinders[type] = unbinder;
        }
        public virtual void Add<T>(IModelUnbinder<T> unbinder) where T : class {
            Add(typeof(T), new GenericModelUnbinderWrapper<T>(unbinder));
        }
        public virtual IModelUnbinder FindUnbinderFor(Type type) {
            IModelUnbinder resultUnbinder = null;
            Type baseType = null;
            foreach (var unbinder in _unbinders) {
                if (unbinder.Key.IsAssignableFrom(type)) {
                    if ((baseType == null) || baseType.IsAssignableFrom(unbinder.Key)) {
                        resultUnbinder = unbinder.Value;
                        baseType = unbinder.Key;
                    }
                }
            }
            return resultUnbinder;
        }
        
        public virtual void Clear() {
            _unbinders.Clear();
        }
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class DefaultModelUnbinder : IModelUnbinder {
        public void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue) {
            routeValueDictionary[routeName] = routeValue;
        }
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class PropertiesUnbinder : IModelUnbinder {
        public virtual void UnbindModel(RouteValueDictionary routeValueDictionary, string routeName, object routeValue) {
            var dict = new RouteValueDictionary(routeValue);
            foreach (var entry in dict) {
                var name = entry.Key;

                if (!(entry.Value is string) && (entry.Value is System.Collections.IEnumerable)) {
                    var enumerableValue = (System.Collections.IEnumerable)entry.Value;
                    var i = 0;
                    foreach (var enumerableElement in enumerableValue) {
                        ModelUnbinderHelpers.AddRouteValues(routeValueDictionary, string.Format("{0}.{1}[{2}]", routeName, name, i), enumerableElement);
                        i++;
                    }
                }
                else {
                    ModelUnbinderHelpers.AddRouteValues(routeValueDictionary, routeName + "." + name, entry.Value);
                }
            }
        }
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class ModelUnbinderHelpers {
        public static void AddRouteValues(RouteValueDictionary routeValueDictionary, string routeName, object routeValue) {
            IModelUnbinder unbinder = DefaultModelUnbinder;
            if (routeValue != null)
            {
                unbinder = ModelUnbinders.FindUnbinderFor(routeValue.GetType()) ?? DefaultModelUnbinder;
            }
            unbinder.UnbindModel(routeValueDictionary, routeName, routeValue);
        }
    
        private static readonly ModelUnbinders _modelUnbinders = new ModelUnbinders();
        public static ModelUnbinders ModelUnbinders {
            get { return _modelUnbinders; }
        }

        public static IModelUnbinder DefaultModelUnbinder { get; set; }
        static ModelUnbinderHelpers() {
            DefaultModelUnbinder = new DefaultModelUnbinder();
        }
    }
}
    #endregion
#endregion T4MVC
#pragma warning restore 1591


